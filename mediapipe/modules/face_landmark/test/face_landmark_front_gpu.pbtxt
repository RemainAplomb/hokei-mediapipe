
type: "FaceLandmarkFrontGpu"

input_stream: "IMAGE:image"

input_side_packet: "NUM_FACES:num_faces"


input_side_packet: "USE_PREV_LANDMARKS:use_prev_landmarks"

input_side_packet: "WITH_ATTENTION:with_attention"

output_stream: "LANDMARKS:multi_face_landmarks"

output_stream: "DETECTIONS:face_detections"

output_stream: "ROIS_FROM_LANDMARKS:face_rects_from_landmarks"

output_stream: "ROIS_FROM_DETECTIONS:face_rects_from_detections"


node {
  calculator: "ImagePropertiesCalculator"
  input_stream: "IMAGE_GPU:gated_image"
  output_stream: "SIZE:image_size"
}

node {
  calculator: "PreviousLoopbackCalculator"
  input_stream: "MAIN:gated_image_size"
  input_stream: "LOOP:face_rects_from_landmarks"
  input_stream_info: {
    tag_index: "LOOP"
    back_edge: true
  }
  output_stream: "PREV_LOOP:prev_face_rects_from_landmarks"
}

node {
  calculator: "GateCalculator"
  input_side_packet: "ALLOW:use_prev_landmarks"
  input_stream: "prev_face_rects_from_landmarks"
  output_stream: "gated_prev_face_rects_from_landmarks"
  options: {
    [mediapipe.GateCalculatorOptions.ext] {
      allow: true
    }
  }
}

# equal to the provided num_faces.
node {
  calculator: "NormalizedRectVectorHasMinSizeCalculator"
  input_stream: "ITERABLE:gated_prev_face_rects_from_landmarks"
  input_side_packet: "num_faces"
  output_stream: "prev_has_enough_faces"
}

node {
  calculator: "GateCalculator"
  input_stream: "image"
  input_stream: "DISALLOW:prev_has_enough_faces"
  output_stream: "gated_image"
  options: {
    [mediapipe.GateCalculatorOptions.ext] {
      empty_packets_as_allow: true
    }
  }
}

node {
  calculator: "ImagePropertiesCalculator"
  input_stream: "IMAGE_GPU:image"
  output_stream: "SIZE:gated_image_size"
}


node {
  calculator: "FaceDetectionShortRangeGpu"
  input_stream: "IMAGE:image_size"
  output_stream: "DETECTIONS:all_face_detections"
}

node {
  calculator: "ClipDetectionVectorSizeCalculator"
  input_stream: "all_face_detections"
  output_stream: "face_detections"
  input_side_packet: "num_faces"
}

node {
  calculator: "BeginLoopDetectionCalculator"
  input_stream: "ITERABLE:face_detections"
  input_stream: "CLONE:image_size"
  output_stream: "ITEM:face_detection"
  output_stream: "CLONE:detections_loop_image_size"
  output_stream: "BATCH_END:detections_loop_end_timestamp"
}

node {
  calculator: "FaceDetectionFrontDetectionToRoi"
  input_stream: "DETECTION:face_detection"
  input_stream: "IMAGE_SIZE:image_size"
  output_stream: "ROI:face_rect_from_detection"
}

node {
  calculator: "EndLoopNormalizedRectCalculator"
  input_stream: "ITEM:face_rect_from_detection"
  input_stream: "BATCH_END:detections_loop_end_timestamp"
  output_stream: "ITERABLE:face_rects_from_detections"
}

node {
  calculator: "AssociationNormRectCalculator"
  input_stream: "face_rects_from_detections"
  input_stream: "gated_prev_face_rects_from_landmarks"
  output_stream: "face_rects"
  options: {
    [mediapipe.AssociationCalculatorOptions.ext] {
      min_similarity_threshold: 0.5
    }
  }
}

node {
  calculator: "BeginLoopNormalizedRectCalculator"
  input_stream: "ITERABLE:face_rects"
  input_stream: "CLONE:0:image"
  input_stream: "CLONE:1:image_size"
  output_stream: "ITEM:face_rect"
  output_stream: "CLONE:0:landmarks_loop_image"
  output_stream: "CLONE:1:landmarks_loop_image_size"
  output_stream: "BATCH_END:landmarks_loop_end_timestamp"
}

node {
  calculator: "FaceLandmarkGpu"
  input_stream: "IMAGE:landmarks_loop_image"
  input_stream: "ROI:face_rect"
  input_side_packet: "WITH_ATTENTION:with_attention"
  output_stream: "LANDMARKS:face_landmarks"
}

node {
  calculator: "EndLoopNormalizedLandmarkListVectorCalculator"
  input_stream: "ITEM:face_landmarks"
  input_stream: "BATCH_END:landmarks_loop_end_timestamp"
  output_stream: "ITERABLE:multi_face_landmarks"
}

node {
  calculator: "FaceLandmarkLandmarksToRoi"
  input_stream: "LANDMARKS:face_landmarks"
  input_stream: "IMAGE_SIZE:landmarks_loop_image_size"
  output_stream: "ROI:face_rect_from_landmarks"
}

