# Define the input stream (image frames)
input_stream: "input_video"

# Define the output streams (gender and facial landmarks)
output_stream: "gender_output"
output_stream: "landmarks_output"



# Throttle 
node {

  calculator: "FlowLimiterCalculator"

  input_stream: "input_video"

  input_stream: "FINISHED:detections"

  input_stream_info: {

    tag_index: "FINISHED"

    back_edge: true

  }

  output_stream: "throttled_input_video"

}


# Transform 
# Transforms the input image on CPU to a 224x224 image. To scale the image, by

# default it uses the STRETCH scale mode that maps the entire input image to the

# entire transformed image. As a result, image aspect ratio may be changed and

# objects in the image may be deformed (stretched or squeezed), but the object

# detection model used in this graph is agnostic to that deformation.

node: {

  calculator: "ImageTransformationCalculator"

  input_stream: "IMAGE:throttled_input_video"

  output_stream: "IMAGE:transformed_input_video"

  node_options: {

    [type.googleapis.com/mediapipe.ImageTransformationCalculatorOptions] {

      output_width: 224

      output_height: 224

    }

  }

}


# Converts the transformed input image on CPU into an image tensor stored as a

# TfLiteTensor.

node {

  calculator: "TfLiteConverterCalculator"

  input_stream: "IMAGE:transformed_input_video"

  output_stream: "TENSORS:image_tensor"

}


# Runs a TensorFlow Lite model on CPU that takes an image tensor and outputs a

# vector of tensors representing, for instance, detection boxes/keypoints and

# scores.

node {

  calculator: "TfLiteInferenceCalculator"

  input_stream: "TENSORS:image_tensor"

  output_stream: "TENSORS:detection_tensors"

  node_options: {

    [type.googleapis.com/mediapipe.TfLiteInferenceCalculatorOptions] {

      model_path: "mediapipe/models/mnv3_large_224_v2_genderFalse-2.tflite"

    }

  }

}


# Define the calculator to extract gender output
node {
  calculator: "mediapipe/calculators/tensor/tensor_slice_calculator"
  input_stream: "TENSORS:detection_tensors"
  input_side_packet: "BEGIN_INDEX:0"
  input_side_packet: "END_INDEX:1"
  output_stream: "output_gender"
}

# Define the calculator to extract landmark output
node {
  calculator: "mediapipe/calculators/tensor/tensor_slice_calculator"
  input_stream: "TENSORS:detection_tensors"
  input_side_packet: "BEGIN_INDEX:1"
  output_stream: "output_landmarks"
}

# Define the calculator to draw gender on video frames
node {
  calculator: "mediapipe/calculators/drawing/drawing_annotator_calculator"
  input_stream: "IMAGE:throttled_input_video"
  input_stream: "COLOR:0,255,0" # green color
  input_stream: "LANDMARKS:output_gender"
  output_stream: "output_video_with_gender"
}

# Define the calculator to draw landmarks on video frames
node {
  calculator: "mediapipe/calculators/drawing/drawing_annotator_calculator"
  input_stream: "IMAGE:output_video_with_gender"
  input_stream: "COLOR:255,0,0" # red color
  input_stream: "LANDMARKS:output_landmarks"
  output_stream: "output_video_with_landmarks"
}

# Connect the nodes
input_video | output_tensor
output_tensor | output_gender
output_tensor | output_landmarks
input_video | output_video_with_gender
output_gender | output_video_with_gender
output_video_with_gender | output_video_with_landmarks
output_landmarks | output_video_with_landmarks

# Specify the output streams
output_gender : gender_output
output_video_with_landmarks : landmarks_output